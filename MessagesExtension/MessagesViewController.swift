//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Spencer Brown on 4/15/17.
//  Copyright Â© 2017 Spencer Brown. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, UIPickerViewDataSource {
    
    //MARK: Properties
    
    enum AppState : Int {
        case initialView
        case detailView
        case completionView
        
        static var count: Int { return AppState.completionView.rawValue + 1}
    }
    
    struct PickerValue{
        
        var string: String = ""
        var date : Date
    }
    
    //List of picker keys
    var pickerKeys: [String] = [String]()
    
    var pickerValues: [PickerValue] = [PickerValue]()
    
    var overallState : AppState = AppState.initialView
    
    var pickerIndex : Int = 0
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        //Listen for the keyboard
        registerKeyboardListener()
        
        //Initialize Picker Date
        setPickerKeys()

        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        
        //Present the correct initial view
        presentVC(for: conversation, with: overallState)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        print("transitioning")
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        print("transitioned")
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    
    //MARK: Picker Data Delegate functions
    // The number of columns of data
    func numberOfComponents(in pickerView: UIPickerView) -> Int{
        return 1
    }
    
    // The number of rows of datab
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return pickerKeys.count
    }
    
    func pickerView(_ pickerView: UIPickerView,
                    titleForRow row: Int,
                    forComponent component: Int) -> String?{
        
        return pickerKeys[row]
    }
    
    func pickerView(_ pickerView: UIPickerView,
                    didSelectRow row: Int,
                    inComponent component: Int){
        
        print(row)
    }
    
    
    //MARK: Private Functions
    
    //Determine which view to show
    private func presentVC(for conversation: MSConversation, with appState: AppState){
        
        let controller: UIViewController
        
        switch appState {
        case .initialView:
            print("in initial view")
            //Change to compact view
            requestPresentationStyle(.compact)
            
            controller = instantiateVC(myType: CompactViewController.self, storyboardID: CompactViewController.storyboardIdentifier)
            

            
            break
        case .detailView:
            print("in detail view")
            
            //Change to expanded view
            requestPresentationStyle(.expanded)
            
            controller = instantiateVC(myType: ExpandedViewController.self, storyboardID: ExpandedViewController.storyboardIdentifier)
            
    
            
            break
        case .completionView:
            print("in completion view")
            
            //Change to compact view
            requestPresentationStyle(.compact)
            
            controller = instantiateVC(myType: CompletionViewController.self, storyboardID: CompletionViewController.storyboardIdentifier)
            
            break
        default:
            fatalError("PresentVC App State Switch Called Default with value \(appState). This shouldnt be possible")
        }
        
        //Embed the new controller
        addChildViewController(controller)
        
        view.addSubview(controller.view)
        controller.didMove(toParentViewController: self)
        
        //update overall state
        overallState = appState
        self.childViewControllers.first?.view?.setNeedsLayout()

        
    }
    
    //Instantiate Compact controller
    private func instantiateVC<T>(myType: T.Type, storyboardID: String) -> UIViewController{
        
        //Instantiate a compact view controller
        
        guard let vc = storyboard?.instantiateViewController(withIdentifier: storyboardID) as? T else {
            fatalError("Can't instantiate CompactViewController")
        }
        
        
        return vc as! UIViewController
        
    }
    
    //Listen for keyboard calls
    private func registerKeyboardListener(){
        
        //Keyboard will show
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(keyboardWillShow),
            name: .UIKeyboardWillShow,
            object: nil
        );
        
    }
    
    @objc private func keyboardWillShow(notification: NSNotification){
        print("keyboard will show")
//        changeToExtendedView()
    }
    
    
    //Function that the children views call to move to the next view
    func changeState(_ currentState: MessagesViewController.AppState, shouldProgress: Bool){
        
        //Get the raw value
        var rawValue: Int = currentState.rawValue
        
        //Increment in the correct direction
        rawValue = shouldProgress ? rawValue+1 : rawValue-1
        if (rawValue < 0 || rawValue == AppState.count ){ rawValue = 0 }
        
        let newState = AppState(rawValue: rawValue)
        
        //Get the correct view
        presentVC(for: activeConversation!, with: newState!)
        
        
    }
    
    //Set the current value for the reminder picker
    func setPickerValue(row: Int){
        
        pickerIndex = row
        
    }
    
    //Set Picker Keys
    private func setPickerKeys(){
        
        //Eventually, populate this list with a set of times
        pickerKeys = ["In 5 minutes", "In 10 minutes", "In an hour", "Tomorrow", "In 3 Days"]
        
        //Determine the time values
        let now = Date()
        let userCalendar = Calendar.current

        //Build out the date string
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .none
        dateFormatter.timeStyle = .short
        
        
        //Soon, later, tomorrow, eventually
        
        //near -- in 10 minutes
        var date = userCalendar.date(byAdding: Calendar.Component.minute, value: 5, to: now)!
        var string = "In 5 minutes (" + dateFormatter.string(from: date) + ")"
        let near = PickerValue(string: string, date: date)
        
        //Soon -- in 10 minutes
        date = userCalendar.date(byAdding: Calendar.Component.minute, value: 10, to: now)!
        string = "In 10 minutes (" + dateFormatter.string(from: date) + ")"
        let soon = PickerValue(string: string, date: date)
        
        //Later -- in 90 minutes
        date = userCalendar.date(byAdding: Calendar.Component.minute, value: 60, to: now)!
        string = "In an hour (" + dateFormatter.string(from: date) + ")"
        let later = PickerValue(string: string, date: date)
        
        dateFormatter.dateStyle = .short
        
        //Tomorrow -- the next day at 2pm
        date = userCalendar.date(byAdding: Calendar.Component.day, value: 1, to: now)!
        date = userCalendar.date(bySetting: Calendar.Component.hour, value: 14, of: date)!
        string = "Tomorrow at 2pm (" + dateFormatter.string(from: date) + ")"
        let tomorrow = PickerValue(string: string, date: date)
        
        //Eventually -- in 3 days at 2pm
        date = userCalendar.date(byAdding: Calendar.Component.day, value: 3, to: now)!
        date = userCalendar.date(bySetting: Calendar.Component.hour, value: 14, of: date)!
        string = "In 3 days at 2pm (" + dateFormatter.string(from: date) + ")"
        let eventually = PickerValue(string: string, date: date)
        
        pickerValues.append(near)
        pickerValues.append(soon)
        pickerValues.append(later)
        pickerValues.append(tomorrow)
        pickerValues.append(eventually)
        
    }

}
